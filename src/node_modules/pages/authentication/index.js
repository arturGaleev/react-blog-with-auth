import React, {useState, useEffect, useContext} from 'react'
import {Link, Redirect} from 'react-router-dom'

import useFetch from 'hooks/useFetch'
import useLocalStorage from 'hooks/useLocalStorage'
import {CurrentUserContext} from 'context/currentUser'
import BackendErrorMessages from 'components/backendErrorMessages'

const Authentication = props => {
  const isLogin = props.match.path === '/login'
  // Авторизация / Регистрация
  const pageTitle = isLogin ? 'Войти': 'Регистрация'
  const descrLink = isLogin ? '/register': '/login'
  const descrText = isLogin ? 'Зарегистрироваться?': 'Войти?'
  const apiUrl = isLogin ? '/users/login': '/users'

  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [username, setUsername] = useState('')
  const [isSuccessfullSubmit, setIsSuccessfullSubmit] = useState(false)
  const [, setToken] = useLocalStorage('token')
  const [{response, isLoading, error}, doFetch] = useFetch(apiUrl)
  const [, dispatch] = useContext(CurrentUserContext)

  const handleSubmit = event => {
    event.preventDefault()
    const user = isLogin ? {email, password} : {email, password, username}
    doFetch({
      method: 'post',
      data: {
        user
      }
    })
  }

  useEffect(() => {
    if (!response) {
      return
    }
    setToken(response.user.token)
    setIsSuccessfullSubmit(true)
    dispatch({
      type: 'SET_AUTHORIZED',
      payload: response.user
    })
  }, [response, setToken, dispatch])

  if (isSuccessfullSubmit) {
    return <Redirect to="/" />
  }

  return (
    <div className="auth-page">
      <div className="container">
        <div className="row">
          <div className="form-wrapper">
            <h1>{pageTitle}</h1>
            <p>
              <Link to={descrLink}>{descrText}</Link>
            </p>
            <form onSubmit={handleSubmit}>
              {error && <BackendErrorMessages backendErrors={error.errors} />}
              {!isLogin && (
                <p className="wrp-field">
                  <input
                    type="text"
                    placeholder="Имя"
                    value={username}
                    onChange={e => setUsername(e.target.value)}
                  />
                </p>
              )}
              <p className="wrp-field">
                <input
                  type="email"
                  placeholder="Email"
                  value={email}
                  onChange={e => setEmail(e.target.value)}
                />
              </p>
              <p className="wrp-field">
                <input
                  type="password"
                  placeholder="Пароль"
                  value={password}
                  onChange={e => setPassword(e.target.value)}
                />
              </p>
              <button
                type="submit"
                className="btn btn-blue"
                disabled={isLoading}
              >
                {isLoading && <span className="btn-loader">&nbsp;</span>}
                {pageTitle}
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Authentication
