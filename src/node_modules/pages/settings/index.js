import React, {useContext, useEffect, useState} from 'react'
import { Redirect } from 'react-router-dom'

import useFetch from 'hooks/useFetch'
import useLocalStorage from 'hooks/useLocalStorage'
import { CurrentUserContext } from 'context/currentUser'
import BackendErrorMessages from 'components/backendErrorMessages'

const Settings = () => {
  const [currentUserState, dispatch] = useContext(CurrentUserContext)
  const apiUrl = '/user'
  const [{ response, error }, doFetch] = useFetch(apiUrl)
  const [image, setImage] = useState('')
  const [username, setUsername] = useState('')
  const [bio, setBio] = useState('')
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [, setToken] = useLocalStorage('token')
  const [isSuccessFullLogout, setIsSuccessFullLogout] = useState(false)

  const handleSubmit = event => {
    event.preventDefault()

    doFetch({
      method: 'put',
      data: {
        user: {
          ...currentUserState.currentUser,
          image,
          username,
          bio,
          email,
          password
        }
      }
    })
  }

  const logout = e => {
    e.preventDefault()
    setToken('')
    dispatch({
      type: 'LOGOUT'
    })
    setIsSuccessFullLogout(true)
  }

  useEffect(() => {
    if (!currentUserState.currentUser) {
      return
    }

    setImage(currentUserState.currentUser.image)
    setUsername(currentUserState.currentUser.username)
    setBio(currentUserState.currentUser.bio)
    setEmail(currentUserState.currentUser.email)

  }, [currentUserState.currentUser])

  useEffect(() => {
    if(!response) {
      return
    }

    dispatch({
      type: 'SET_AUTHORIZED',
      payload: response.user
    })
  }, [response, dispatch])

  if (isSuccessFullLogout) {
    return <Redirect to='/' />
  }

  return (
    <div className="settings-page">
      <div className="container">
        <div className="row">
          <div className="form-wrapper">
            <h1>Ваши настройки</h1>
            {error && <BackendErrorMessages backendErrors={error.errors} />}
            <form onSubmit={handleSubmit}>
              <p className="wrp-field">
                <input
                  type="text"
                  placeholder="Url картинки"
                  value={image}
                  onChange={e => setImage(e.target.value)}
                />
              </p>
              <p className="wrp-field">
                <input
                  type="text"
                  placeholder="Имя"
                  value={username}
                  onChange={e => setUsername(e.target.value)}
                />
              </p>
              <p className="wrp-field">
                <textarea
                  placeholder="Биография"
                  rows="8"
                  value={bio}
                  onChange={e => setBio(e.target.value)}
                />
              </p>
              <p className="wrp-field">
                <input
                  type="text"
                  placeholder="Email"
                  value={email}
                  onChange={e => setEmail(e.target.value)}
                />
              </p>
              <p className="wrp-field">
                <input
                  type="password"
                  placeholder="Пароль"
                  value={password}
                  onChange={e => setPassword(e.target.value)}
                />
              </p>
              <button
                type="submit"
                className="btn btn-blue"
                // disabled={isLoading}
              >
                {/*{isLoading && <span className="btn-loader">&nbsp;</span>}*/}
                {/*{pageTitle}*/}
                Обновить
              </button>
            </form>
            <hr />
            <button
              type="submit"
              className="btn btn-blue"
              onClick={logout}
              // disabled={isLoading}
            >
              {/*{isLoading && <span className="btn-loader">&nbsp;</span>}*/}
              {/*{pageTitle}*/}
              Выйти
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Settings
